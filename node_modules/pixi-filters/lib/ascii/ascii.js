'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct AsciiUniforms {\n    uSize: f32,\n    uColor: vec3<f32>,\n    uReplaceColor: f32,\n};\n\nstruct GlobalFilterUniforms {\n    uInputSize:vec4<f32>,\n    uInputPixel:vec4<f32>,\n    uInputClamp:vec4<f32>,\n    uOutputFrame:vec4<f32>,\n    uGlobalFrame:vec4<f32>,\n    uOutputTexture:vec4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \n@group(0) @binding(2) var uSampler: sampler;\n@group(1) @binding(0) var<uniform> asciiUniforms : AsciiUniforms;\n\n@fragment\nfn mainFragment(\n    @location(0) uv: vec2<f32>,\n    @builtin(position) position: vec4<f32>\n) -> @location(0) vec4<f32> {\n    let pixelSize: f32 = asciiUniforms.uSize;\n    let coord: vec2<f32> = mapCoord(uv);\n\n    // get the rounded color..\n    var pixCoord: vec2<f32> = pixelate(coord, vec2<f32>(pixelSize));\n    pixCoord = unmapCoord(pixCoord);\n\n    var color = textureSample(uTexture, uSampler, pixCoord);\n\n    // determine the character to use\n    let gray: f32 = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;\n    \n    var n: f32 = 65536.0; // .\n    if (gray > 0.2) {\n        n = 65600.0;    // :\n    }\n    if (gray > 0.3) {\n        n = 332772.0;   // *\n    }\n    if (gray > 0.4) {\n        n = 15255086.0; // o\n    }\n    if (gray > 0.5) {\n        n = 23385164.0; // &\n    }\n    if (gray > 0.6) {\n        n = 15252014.0; // 8\n    }\n    if (gray > 0.7) {\n        n = 13199452.0; // @\n    }\n    if (gray > 0.8) {\n        n = 11512810.0; // #\n    }\n\n    // get the mod..\n    let modd: vec2<f32> = getMod(coord, vec2<f32>(pixelSize));\n    return select(color, vec4<f32>(asciiUniforms.uColor, 1.), asciiUniforms.uReplaceColor > 0.5) * character(n, vec2<f32>(-1.0) + modd * 2.0);\n}\n\nfn pixelate(coord: vec2<f32>, size: vec2<f32>) -> vec2<f32>\n{\n    return floor( coord / size ) * size;\n}\n\nfn getMod(coord: vec2<f32>, size: vec2<f32>) -> vec2<f32>\n{\n    return moduloVec2( coord , size) / size;\n}\n\nfn character(n: f32, p: vec2<f32>) -> f32\n{\n    var q: vec2<f32> = floor(p*vec2<f32>(4.0, 4.0) + 2.5);\n\n    if (clamp(q.x, 0.0, 4.0) == q.x)\n    {\n        if (clamp(q.y, 0.0, 4.0) == q.y)\n        {\n        if (i32(modulo(n/exp2(q.x + 5.0*q.y), 2.0)) == 1)\n        {\n            return 1.0;\n        }\n        }\n    }\n\n    return 0.0;\n}\n\nfn modulo(x: f32, y: f32) -> f32\n{\n  return x - y * floor(x/y);\n}\n\nfn moduloVec2(x: vec2<f32>, y: vec2<f32>) -> vec2<f32>\n{\n  return x - y * floor(x/y);\n}\n\nfn mapCoord(coord: vec2<f32> ) -> vec2<f32>\n{\n    var mappedCoord: vec2<f32> = coord;\n    mappedCoord *= gfu.uInputSize.xy;\n    mappedCoord += gfu.uOutputFrame.xy;\n    return mappedCoord;\n}\n\nfn unmapCoord(coord: vec2<f32> ) -> vec2<f32>\n{\n    var mappedCoord: vec2<f32> = coord;\n    mappedCoord -= gfu.uOutputFrame.xy;\n    mappedCoord /= gfu.uInputSize.xy;\n    return mappedCoord;\n}";

exports["default"] = source;
//# sourceMappingURL=ascii.js.map
