{"version":3,"file":"ZoomBlurFilter.js","sources":["../../src/zoom-blur/ZoomBlurFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './zoom-blur.frag';\nimport source from './zoom-blur.wgsl';\n\n/** Options for the ZoomBlurFilter constructor. */\nexport interface ZoomBlurFilterOptions\n{\n    /**\n     * Sets the strength of the zoom blur effect\n     * @default 0.1\n     */\n    strength?: number;\n    /**\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\n     * once defined in the constructor\n     * @default {x:0,y:0}\n     */\n    center?: PointData | number[];\n    /**\n     * The inner radius of zoom. The part in inner circle won't apply zoom blur effect\n     * @default 0\n     */\n    innerRadius?: number;\n    /**\n     * Outer radius of the effect. less than `0` equates to infinity\n     * @default -1\n     */\n    radius?: number;\n    /**\n     * On older iOS devices, it's better to not go above `13.0`.\n     * Decreasing this value will produce a lower-quality blur effect with more dithering\n     * @default 32\n     */\n    maxKernelSize?: number;\n}\n\n/**\n * The ZoomFilter applies a Zoom blur to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/zoom-blur.png)\n *\n * @class\n * @extends Filter\n */\nexport class ZoomBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ZoomBlurFilterOptions = {\n        strength: 0.1,\n        center: { x: 0, y: 0 },\n        innerRadius: 0,\n        radius: -1,\n        maxKernelSize: 32,\n    };\n\n    public uniforms: {\n        uStrength: number;\n        uCenter: PointData;\n        uRadii: Float32Array\n    };\n\n    /**\n     * @param options - Options for the ZoomBlurFilter constructor.\n     */\n    constructor(options?: ZoomBlurFilterOptions)\n    {\n        options = { ...ZoomBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const kernelSize = options.maxKernelSize ?? 32;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: source.replace('${MAX_KERNEL_SIZE}', kernelSize.toFixed(1)),\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace('${MAX_KERNEL_SIZE}', kernelSize.toFixed(1)),\n            name: 'zoom-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                zoomBlurUniforms: {\n                    uStrength: { value: options.strength, type: 'f32' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uRadii: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.zoomBlurUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Sets the strength of the zoom blur effect\n     * @default 0.1\n     */\n    get strength(): number { return this.uniforms.uStrength; }\n    set strength(value: number) { this.uniforms.uStrength = value; }\n\n    /**\n     * The center of the zoom\n     * @default [0,0]\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData | number[])\n    {\n        if (Array.isArray(value))\n        {\n            value = { x: value[0], y: value[1] };\n        }\n\n        this.uniforms.uCenter = value;\n    }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.uniforms.uCenter.x; }\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `y` axis\n     * @default 0\n     */\n    get centerY(): number { return this.uniforms.uCenter.y; }\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\n\n    /**\n     * The inner radius of zoom. The part in inner circle won't apply zoom blur effect\n     * @default 0\n     */\n    get innerRadius(): number { return this.uniforms.uRadii[0]; }\n    set innerRadius(value: number) { this.uniforms.uRadii[0] = value; }\n\n    /**\n     * Outer radius of the effect. less than `0` equates to infinity\n     * @default -1\n     */\n    get radius(): number { return this.uniforms.uRadii[1]; }\n    set radius(value: number) { this.uniforms.uRadii[1] = (value < 0 || value === Infinity) ? -1 : value; }\n}\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":"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"}