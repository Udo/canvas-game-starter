'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct SimplexUniforms {\n  uStrength:f32,\n  uNoiseScale:f32,\n  uOffsetX:f32,\n  uOffsetY:f32,\n  uOffsetZ:f32,\n  uStep:f32\n};\n\nstruct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \n@group(0) @binding(2) var uSampler: sampler;\n@group(1) @binding(0) var<uniform> simplexUniforms : SimplexUniforms;\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @builtin(position) position: vec4<f32>\n) -> @location(0) vec4<f32> {\n  var noise: f32 = simplex_noise(vec3<f32>(uv * simplexUniforms.uNoiseScale + vec2<f32>(simplexUniforms.uOffsetX, simplexUniforms.uOffsetY), simplexUniforms.uOffsetZ)) * 0.5 + 0.5;\n\tnoise = noise + (2. * simplexUniforms.uStrength - 1.);\n\tnoise = clamp(noise, 0.0, 1.0);\n\tif (simplexUniforms.uStep > 0.0) {\n\t\tnoise = 1. - step(noise, simplexUniforms.uStep);\n\t}\n\treturn textureSample(uTexture, uSampler, uv) * noise;\n}\n\nconst MOD3: vec3<f32> = vec3<f32>(0.1031, 0.11369, 0.13787);\nfn hash33(p3: vec3<f32>) -> vec3<f32> {\n\tvar p3_var = p3;\n\tp3_var = fract(p3_var * MOD3);\n\tp3_var = p3_var + (dot(p3_var, p3_var.yxz + 19.19));\n\treturn -1. + 2. * fract(vec3<f32>((p3_var.x + p3_var.y) * p3_var.z, (p3_var.x + p3_var.z) * p3_var.y, (p3_var.y + p3_var.z) * p3_var.x));\n} \n\nfn simplex_noise(p: vec3<f32>) -> f32 {\n\tlet K1: f32 = 0.33333334;\n\tlet K2: f32 = 0.16666667;\n\tlet i: vec3<f32> = floor(p + (p.x + p.y + p.z) * K1);\n\tlet d0: vec3<f32> = p - (i - (i.x + i.y + i.z) * K2);\n\tlet e: vec3<f32> = step(vec3<f32>(0.), d0 - d0.yzx);\n\tlet i1: vec3<f32> = e * (1. - e.zxy);\n\tlet i2: vec3<f32> = 1. - e.zxy * (1. - e);\n\tlet d1: vec3<f32> = d0 - (i1 - 1. * K2);\n\tlet d2: vec3<f32> = d0 - (i2 - 2. * K2);\n\tlet d3: vec3<f32> = d0 - (1. - 3. * K2);\n\tlet h: vec4<f32> = max(vec4<f32>(0.6) - vec4<f32>(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), vec4<f32>(0.0));\n\tlet n: vec4<f32> = h * h * h * h * vec4<f32>(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.)));\n\treturn dot(vec4<f32>(31.316), n);\n} ";

exports["default"] = source;
//# sourceMappingURL=simplex2.js.map
