{"version":3,"file":"ColorMapFilter.mjs","sources":["../../src/color-map/ColorMapFilter.ts"],"sourcesContent":["import { deprecation, Filter, GlProgram, GpuProgram, SCALE_MODE, Texture, TextureSource } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './color-map.frag';\nimport source from './color-map.wgsl';\n\ntype ColorMapTexture = TextureSource | Texture;\n\n/** Options for the ColorMapFilter constructor. */\nexport interface ColorMapFilterOptions\n{\n    /** The colorMap texture of the filter. */\n    colorMap: ColorMapTexture;\n    /**\n     *  The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n     * @default 1\n     */\n    mix?: number;\n    /**\n     * Whether use NEAREST scale mode for `colorMap` texture.\n     * @default false\n     */\n    nearest?: boolean;\n}\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-map.png)\n *\n * @class\n * @extends Filter\n */\nexport class ColorMapFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ColorMapFilterOptions = {\n        colorMap: Texture.WHITE,\n        nearest: false,\n        mix: 1\n    };\n\n    public uniforms: {\n        uMix: number;\n        uSize: number;\n        uSliceSize: number;\n        uSlicePixelSize: number;\n        uSliceInnerSize: number;\n    };\n\n    private _size = 0;\n    private _sliceSize = 0;\n    private _slicePixelSize = 0;\n    private _sliceInnerSize = 0;\n    private _nearest = false;\n    private _scaleMode: SCALE_MODE = 'linear';\n    private _colorMap!: ColorMapTexture;\n\n    /**\n     * @param options - Options for the ColorMapFilter constructor.\n     */\n    constructor(options: ColorMapFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The\n     *        colorMap texture of the filter.\n     * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n     * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n     */\n    constructor(colorMap: ColorMapTexture, nearest?: boolean, mix?: number);\n    /** @ignore */\n    constructor(...args: [ColorMapFilterOptions] | [ColorMapTexture, boolean?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Texture || options instanceof TextureSource)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ColorMapFilter constructor params are now options object. See params: { colorMap, nearest, mix }');\n\n            options = { colorMap: options };\n\n            if (args[1] !== undefined) options.nearest = args[1];\n            if (args[2] !== undefined) options.mix = args[2];\n        }\n\n        options = { ...ColorMapFilter.DEFAULT_OPTIONS, ...options };\n\n        if (!options.colorMap) throw Error('No color map texture source was provided to ColorMapFilter');\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-map-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorMapUniforms: {\n                    uMix: { value: options.mix, type: 'f32' },\n                    uSize: { value: 0, type: 'f32' },\n                    uSliceSize: { value: 0, type: 'f32' },\n                    uSlicePixelSize: { value: 0, type: 'f32' },\n                    uSliceInnerSize: { value: 0, type: 'f32' },\n                },\n                uMapTexture: options.colorMap.source,\n                uMapSampler: options.colorMap.source.style,\n            },\n        });\n\n        this.uniforms = this.resources.colorMapUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    /** The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image. */\n    get mix(): number { return this.uniforms.uMix; }\n    set mix(value: number) { this.uniforms.uMix = value; }\n\n    /**\n     * The size of one color slice.\n     * @readonly\n     */\n    get colorSize(): number { return this._size; }\n\n    /** The colorMap texture. */\n    get colorMap(): ColorMapTexture { return this._colorMap; }\n    set colorMap(value: ColorMapTexture)\n    {\n        if (!value || value === this.colorMap) return;\n\n        const source = value instanceof Texture ? value.source : value;\n\n        source.style.scaleMode = this._scaleMode;\n        source.autoGenerateMipmaps = false;\n\n        this._size = source.height;\n        this._sliceSize = 1 / this._size;\n        this._slicePixelSize = this._sliceSize / this._size;\n        this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n        this.uniforms.uSize = this._size;\n        this.uniforms.uSliceSize = this._sliceSize;\n        this.uniforms.uSlicePixelSize = this._slicePixelSize;\n        this.uniforms.uSliceInnerSize = this._sliceInnerSize;\n\n        this.resources.uMapTexture = source;\n        this._colorMap = value;\n    }\n\n    /** Whether use NEAREST for colorMap texture. */\n    get nearest(): boolean { return this._nearest; }\n    set nearest(nearest: boolean)\n    {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? 'nearest' : 'linear';\n\n        const texture = this._colorMap;\n\n        if (texture && texture.source)\n        {\n            texture.source.scaleMode = this._scaleMode;\n            texture.source.autoGenerateMipmaps = false;\n            texture.source.style.update();\n            texture.source.update();\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas,\n     * and the content of canvas has changed, then call `updateColorMap` for update texture.\n     */\n    updateColorMap(): void\n    {\n        const texture = this._colorMap;\n\n        if (texture?.source)\n        {\n            texture.source.update();\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     * @default false\n     */\n    destroy(): void\n    {\n        this._colorMap?.destroy(/** true | TODO: Should base texture be destroyed? **/);\n        super.destroy();\n    }\n}\n"],"names":["source"],"mappings":"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"}