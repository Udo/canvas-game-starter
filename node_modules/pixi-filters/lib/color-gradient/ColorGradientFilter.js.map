{"version":3,"file":"ColorGradientFilter.js","sources":["../../src/color-gradient/ColorGradientFilter.ts"],"sourcesContent":["import { Color, ColorSource, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport fragment from './color-gradient.frag';\nimport vertex from './color-gradient.vert';\nimport source from './color-gradient.wgsl';\nimport { parseCssGradient } from './CssGradientParser';\n\n/** Color stop object. */\nexport interface ColorStop\n{\n    offset: number;\n    color: ColorSource;\n    alpha: number;\n}\n\n/** Options for ColorGradientFilter constructor. */\nexport interface ColorGradientFilterOptions\n{\n    /**\n     * Linear = 0, Radial = 1, Conic = 2\n     * @default ColorGradientFilter.LINEAR\n     */\n    type: number;\n    /** Collection of stops, must be 2+ */\n    stops: ColorStop[];\n    /**\n     * Angle for linear gradients, in degrees.\n     * @default 90\n     */\n    angle?: number;\n    /**\n     * Alpha value for the gradient.\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * Maximum number of colors to render (0 = no limit)\n     * @default 0\n     */\n    maxColors?: number;\n    /**\n     * If true, the gradient will replace the existing color, otherwise it will be multiplied with it\n     * @default false\n     */\n    replace?: boolean;\n}\n\n/** Options for CSS-style gradient for use with constructor. */\nexport interface ColorGradientFilterCSSOptions\n{\n    /** CSS-style gradient string */\n    css: string;\n    /**\n     * Alpha value for the gradient.\n     * @default 1\n     */\n    alpha?: number;\n    /**\n     * Maximum number of colors to render (0 = no limit)\n     * @default 0\n     */\n    maxColors?: number;\n}\n\nconst ANGLE_OFFSET = 90; // align degrees with CSS\n\nfunction sortColorStops(stops: ColorStop[]): ColorStop[]\n{\n    return [...stops].sort((a, b) => a.offset - b.offset);\n}\n\n/**\n * Render a colored gradient.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-gradient.png)\n *\n * @class\n * @extends Filter\n */\nexport class ColorGradientFilter extends Filter\n{\n    /** Gradient types */\n    static readonly LINEAR = 0;\n    static readonly RADIAL = 1;\n    static readonly CONIC = 2;\n\n    /** Default constructor options */\n    public static readonly defaults: ColorGradientFilterOptions = {\n        type: ColorGradientFilter.LINEAR,\n        stops: [\n            { offset: 0.0, color: 0xff0000, alpha: 1.0 },\n            { offset: 1.0, color: 0x0000ff, alpha: 1.0 },\n        ],\n        alpha: 1.0,\n        angle: 90.0,\n        maxColors: 0,\n        replace: false,\n    };\n\n    public baseUniforms: {\n        uOptions: Float32Array;\n        uCounts: Float32Array;\n    };\n\n    public stopsUniforms: {\n        uColors: Float32Array;\n        uStops: Float32Array;\n    };\n\n    private _stops: ColorStop[] = [];\n\n    /**\n     * @param options - Options for the ColorGradientFilter constructor.\n     */\n    constructor(options?: ColorGradientFilterOptions | ColorGradientFilterCSSOptions)\n    {\n        if (options && 'css' in options)\n        {\n            options = {\n                ...parseCssGradient(options.css || ''),\n                alpha: options.alpha ?? ColorGradientFilter.defaults.alpha,\n                maxColors: options.maxColors ?? ColorGradientFilter.defaults.maxColors,\n            };\n        }\n        else\n        {\n            options = { ...ColorGradientFilter.defaults, ...options };\n        }\n\n        if (!options.stops || options.stops.length < 2)\n        {\n            throw new Error('ColorGradientFilter requires at least 2 color stops.');\n        }\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-gradient-filter',\n        });\n\n        const maxStops = 32;\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                baseUniforms: {\n                    uOptions: {\n                        value: [\n                            // Gradient Type\n                            options.type,\n                            // Gradient Angle\n                            options.angle ?? ANGLE_OFFSET,\n                            // Master Alpha\n                            options.alpha,\n                            // Replace Base Color\n                            options.replace ? 1 : 0,\n                        ],\n                        type: 'vec4<f32>',\n                    },\n                    uCounts: {\n                        value: [\n                            // Number of Stops\n                            options.stops.length,\n                            // Max Gradient Colors\n                            options.maxColors,\n                        ],\n                        type: 'vec2<f32>',\n                    },\n                },\n                stopsUniforms: {\n                    uColors: { value: new Float32Array(maxStops * 3), type: 'vec3<f32>', size: maxStops },\n\n                    // We only need vec2, but we need to pad to eliminate the WGSL warning, TODO: @Mat ?\n                    uStops: { value: new Float32Array(maxStops * 4), type: 'vec4<f32>', size: maxStops },\n                }\n            },\n        });\n\n        this.baseUniforms = this.resources.baseUniforms.uniforms;\n        this.stopsUniforms = this.resources.stopsUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    get stops(): ColorStop[]\n    {\n        return this._stops;\n    }\n\n    set stops(stops: ColorStop[])\n    {\n        const sortedStops = sortColorStops(stops);\n        const color = new Color();\n        let r;\n        let g;\n        let b;\n\n        for (let i = 0; i < sortedStops.length; i++)\n        {\n            color.setValue(sortedStops[i].color);\n            const indexStart = i * 3;\n\n            [r, g, b] = color.toArray();\n            this.stopsUniforms.uColors[indexStart] = r;\n            this.stopsUniforms.uColors[indexStart + 1] = g;\n            this.stopsUniforms.uColors[indexStart + 2] = b;\n\n            this.stopsUniforms.uStops[i * 4] = sortedStops[i].offset;\n            this.stopsUniforms.uStops[(i * 4) + 1] = sortedStops[i].alpha;\n        }\n\n        this.baseUniforms.uCounts[0] = sortedStops.length;\n        this._stops = sortedStops;\n    }\n\n    /**\n   * The type of gradient\n   * @default ColorGradientFilter.LINEAR\n   */\n    get type(): number { return this.baseUniforms.uOptions[0]; }\n    set type(value: number) { this.baseUniforms.uOptions[0] = value; }\n\n    /**\n   * The angle of the gradient in degrees\n   * @default 90\n   */\n    get angle(): number { return this.baseUniforms.uOptions[1] + ANGLE_OFFSET; }\n    set angle(value: number) { this.baseUniforms.uOptions[1] = value - ANGLE_OFFSET; }\n\n    /**\n   * The alpha value of the gradient (0-1)\n   * @default 1\n   */\n    get alpha(): number { return this.baseUniforms.uOptions[2]; }\n    set alpha(value: number) { this.baseUniforms.uOptions[2] = value; }\n\n    /**\n   * The maximum number of colors to render (0 = no limit)\n   * @default 0\n   */\n    get maxColors(): number { return this.baseUniforms.uCounts[1]; }\n    set maxColors(value: number) { this.baseUniforms.uCounts[1] = value; }\n\n    /**\n     * If true, the gradient will replace the existing color, otherwise it\n     * will be multiplied with it\n     * @default false\n     */\n    get replace(): boolean { return this.baseUniforms.uOptions[3] > 0.5; }\n    set replace(value: boolean) { this.baseUniforms.uOptions[3] = value ? 1 : 0; }\n}\n\n"],"names":["Filter","parseCssGradient","GpuProgram","source","GlProgram","vertex","fragment","Color"],"mappings":"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"}