{"version":3,"file":"ColorReplaceFilter.mjs","sources":["../../src/color-replace/ColorReplaceFilter.ts"],"sourcesContent":["import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './color-replace.frag';\nimport source from './color-replace.wgsl';\n\n/**\n * This WebGPU filter has been ported from the WebGL renderer that was originally created by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n */\n\ntype DeprecatedColor = number | number[] | Float32Array;\n\n/** Options for the ColorReplaceFilter constructor. */\nexport interface ColorReplaceFilterOptions\n{\n    /**\n     * The color that will be changed.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xff0000\n     */\n    originalColor?: ColorSource;\n    /**\n     * The resulting color.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0x000000\n     */\n    targetColor?: ColorSource;\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.4\n     */\n    tolerance?: number;\n}\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/color-replace.png)\n *\n * @class\n * @extends Filter\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter({\n *   originalColor: [1, 0, 0],\n *   targetColor: [0, 0, 1],\n *   tolerance: 0.001\n *   })];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter({\n *   originalColor: [220/255.0, 220/255.0, 220/255.0],\n *   targetColor: [225/255.0, 200/255.0, 215/255.0],\n *   tolerance: 0.001\n *   })];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter({ originalColor: 0xdcdcdc, targetColor: 0xe1c8d7, tolerance: 0.001 })];\n *\n */\nexport class ColorReplaceFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: ColorReplaceFilterOptions = {\n        originalColor: 0xff0000,\n        targetColor: 0x000000,\n        tolerance: 0.4\n    };\n\n    public uniforms: {\n        uOriginalColor: Float32Array,\n        uTargetColor: Float32Array,\n        uTolerance: number,\n    };\n\n    private _originalColor: Color;\n    private _targetColor: Color;\n\n    /**\n     * @param options - Options for the ColorReplaceFilter constructor.\n     */\n    constructor(options?: ColorReplaceFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number|Array<number>|Float32Array} [originalColor=0xFF0000] - The color that will be changed,\n     *        as a 3 component RGB e.g. `[1.0, 1.0, 1.0]`\n     * @param {number|Array<number>|Float32Array} [newColor=0x000000] - The resulting color, as a 3 component\n     *        RGB e.g. `[1.0, 0.5, 1.0]`\n     * @param {number} [epsilon=0.4] - Tolerance/sensitivity of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     */\n    constructor(originalColor?: number, newColor?: number, epsilon?: number);\n    /** @ignore */\n    constructor(...args: [ColorReplaceFilterOptions?] | [DeprecatedColor?, DeprecatedColor?, number?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options) || options instanceof Float32Array)\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'ColorReplaceFilter constructor params are now options object. See params: { originalColor, targetColor, tolerance }');\n\n            options = { originalColor: options };\n\n            if (args[1] !== undefined) options.targetColor = args[1];\n            if (args[2] !== undefined) options.tolerance = args[2];\n        }\n\n        options = { ...ColorReplaceFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'color-replace-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                colorReplaceUniforms: {\n                    uOriginalColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uTargetColor: { value: new Float32Array(3), type: 'vec3<f32>' },\n                    uTolerance: { value: options.tolerance, type: 'f32' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.colorReplaceUniforms.uniforms;\n\n        this._originalColor = new Color();\n        this._targetColor = new Color();\n        this.originalColor = options.originalColor ?? 0xff0000;\n        this.targetColor = options.targetColor ?? 0x000000;\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * The color that will be changed.\n     * @example [1.0, 1.0, 1.0] = 0xffffff\n     * @default 0xff0000\n     */\n    get originalColor(): ColorSource { return this._originalColor.value as ColorSource; }\n    set originalColor(value: ColorSource)\n    {\n        this._originalColor.setValue(value);\n        const [r, g, b] = this._originalColor.toArray();\n\n        this.uniforms.uOriginalColor[0] = r;\n        this.uniforms.uOriginalColor[1] = g;\n        this.uniforms.uOriginalColor[2] = b;\n    }\n\n    /**\n      * The resulting color.\n      * @example [1.0, 1.0, 1.0] = 0xffffff\n      * @default 0x000000\n      */\n    get targetColor(): ColorSource { return this._targetColor.value as ColorSource; }\n    set targetColor(value: ColorSource)\n    {\n        this._targetColor.setValue(value);\n        const [r, g, b] = this._targetColor.toArray();\n\n        this.uniforms.uTargetColor[0] = r;\n        this.uniforms.uTargetColor[1] = g;\n        this.uniforms.uTargetColor[2] = b;\n    }\n\n    /**\n      * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n      * @default 0.4\n      */\n    get tolerance(): number { return this.uniforms.uTolerance; }\n    set tolerance(value: number) { this.uniforms.uTolerance = value; }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>|Float32Array}\n     * @default 0x000000\n     * @see ColorReplaceFilter#targetColor\n     */\n    set newColor(value: DeprecatedColor)\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.newColor is deprecated, please use ColorReplaceFilter.targetColor instead');\n\n        this.targetColor = value;\n    }\n    get newColor(): DeprecatedColor\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.newColor is deprecated, please use ColorReplaceFilter.targetColor instead');\n\n        return this.targetColor as DeprecatedColor;\n    }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.4\n     * @see ColorReplaceFilter#tolerance\n     */\n    set epsilon(value: number)\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.epsilon is deprecated, please use ColorReplaceFilter.tolerance instead');\n\n        this.tolerance = value;\n    }\n    get epsilon(): number\n    {\n        deprecation('6.0.0', 'ColorReplaceFilter.epsilon is deprecated, please use ColorReplaceFilter.tolerance instead');\n\n        return this.tolerance;\n    }\n}\n"],"names":[],"mappings":"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"}