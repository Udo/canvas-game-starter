{"version":3,"file":"toLocalGlobalMixin.js","sources":["../../../../src/scene/container/container-mixins/toLocalGlobalMixin.ts"],"sourcesContent":["import { Point } from '../../../maths/point/Point';\nimport { matrixPool } from '../bounds/utils/matrixAndBoundsPool';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Container } from '../Container';\n\nexport interface ToLocalGlobalMixin\n{\n    getGlobalPosition(point?: Point, skipUpdate?: boolean): Point;\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate?: boolean): P;\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P;\n}\n\nexport const toLocalGlobalMixin: Partial<Container> = {\n    /**\n     * Returns the global position of the container.\n     * @param point - The optional point to write the global value to.\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - The updated point.\n     * @memberof scene.Container#\n     */\n    getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n    {\n        if (this.parent)\n        {\n            this.parent.toGlobal(this._position, point, skipUpdate);\n        }\n        else\n        {\n            point.x = this._position.x;\n            point.y = this._position.y;\n        }\n\n        return point;\n    },\n\n    /**\n     * Calculates the global position of the container.\n     * @param position - The world origin to calculate from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - A point object representing the position of this object.\n     * @memberof scene.Container#\n     */\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate = false): P\n    {\n        const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n\n        // simply apply the matrix..\n        point = globalMatrix.apply(position, point);\n\n        matrixPool.return(globalMatrix);\n\n        return point;\n    },\n\n    /**\n     * Calculates the local position of the container relative to another point.\n     * @param position - The world origin to calculate from.\n     * @param from - The Container to calculate the global position from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform\n     * @returns - A point object representing the position of this object\n     * @memberof scene.Container#\n     */\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n\n        // simply apply the matrix..\n        point = globalMatrix.applyInverse(position, point);\n\n        matrixPool.return(globalMatrix);\n\n        return point;\n    }\n} as Container;\n"],"names":["Point","matrixPool"],"mappings":";;;;;;AAaO,MAAM,kBAAyC,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlD,kBAAkB,KAAe,GAAA,IAAIA,WAAM,EAAA,EAAG,aAAa,KAC3D,EAAA;AACI,IAAA,IAAI,KAAK,MACT,EAAA;AACI,MAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,IAAK,CAAA,SAAA,EAAW,OAAO,UAAU,CAAA,CAAA;AAAA,KAG1D,MAAA;AACI,MAAM,KAAA,CAAA,CAAA,GAAI,KAAK,SAAU,CAAA,CAAA,CAAA;AACzB,MAAM,KAAA,CAAA,CAAA,GAAI,KAAK,SAAU,CAAA,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAsC,CAAA,QAAA,EAAqB,KAAW,EAAA,UAAA,GAAa,KACnF,EAAA;AACI,IAAA,MAAM,eAAe,IAAK,CAAA,kBAAA,CAAmBC,8BAAW,CAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AAGzE,IAAQ,KAAA,GAAA,YAAA,CAAa,KAAM,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAE1C,IAAAA,8BAAA,CAAW,OAAO,YAAY,CAAA,CAAA;AAE9B,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAqC,CAAA,QAAA,EAAqB,IAAkB,EAAA,KAAA,EAAW,UACvF,EAAA;AACI,IAAA,IAAI,IACJ,EAAA;AACI,MAAA,QAAA,GAAW,IAAK,CAAA,QAAA,CAAS,QAAU,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,MAAM,eAAe,IAAK,CAAA,kBAAA,CAAmBA,8BAAW,CAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AAGzE,IAAQ,KAAA,GAAA,YAAA,CAAa,YAAa,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAEjD,IAAAA,8BAAA,CAAW,OAAO,YAAY,CAAA,CAAA;AAE9B,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AACJ;;;;"}