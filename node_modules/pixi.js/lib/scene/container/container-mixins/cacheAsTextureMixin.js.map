{"version":3,"file":"cacheAsTextureMixin.js","sources":["../../../../src/scene/container/container-mixins/cacheAsTextureMixin.ts"],"sourcesContent":["import { deprecation } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\nimport type { CacheAsTextureOptions } from '../RenderGroup';\n\nexport interface CacheAsTextureMixinConstructor\n{\n    cacheAsTexture?: (val: boolean | CacheAsTextureOptions) => void;\n}\n\nexport interface CacheAsTextureMixin extends Required<CacheAsTextureMixinConstructor>\n{\n    /**\n     * Caches this container as a texture. This allows the container to be rendered as a single texture,\n     * which can improve performance for complex static containers.\n     * @param val - If true, enables caching with default options. If false, disables caching.\n     * Can also pass options object to configure caching behavior.\n     * @memberof scene.Container#\n     */\n    cacheAsTexture: (val: boolean | CacheAsTextureOptions) => void;\n\n    /**\n     * Updates the cached texture of this container. This will flag the container's cached texture\n     * to be redrawn on the next render.\n     * @memberof scene.Container#\n     */\n    updateCacheTexture: () => void;\n\n    /**\n     * Legacy property for backwards compatibility with PixiJS v7 and below.\n     * Use `cacheAsTexture` instead.\n     * @deprecated Since PixiJS v8\n     * @memberof scene.Container#\n     */\n    cacheAsBitmap: boolean;\n\n    /**\n     * Whether this container is currently cached as a texture.\n     * @readonly\n     * @memberof scene.Container#\n     */\n    readonly isCachedAsTexture: boolean;\n}\n\nexport const cacheAsTextureMixin: Partial<Container> = {\n    /**\n     * Is this container cached as a texture?\n     * @readonly\n     * @type {boolean}\n     * @memberof scene.Container#\n     */\n    get isCachedAsTexture(): boolean\n    {\n        return !!this.renderGroup?.isCachedAsTexture;\n    },\n\n    cacheAsTexture(val: boolean | CacheAsTextureOptions): void\n    {\n        if (typeof val === 'boolean' && val === false)\n        {\n            this.disableRenderGroup();\n        }\n        else\n        {\n            this.enableRenderGroup();\n            this.renderGroup.enableCacheAsTexture(val === true ? {} : val);\n        }\n    },\n\n    /**\n     * Updates the cached texture. Will flag that this container's cached texture needs to be redrawn.\n     * This will happen on the next render.\n     * @memberof scene.Container#\n     */\n    updateCacheTexture(): void\n    {\n        this.renderGroup?.updateCacheTexture();\n    },\n\n    /**\n     * Allows backwards compatibility with pixi.js below version v8. Use `cacheAsTexture` instead.\n     * @deprecated\n     */\n    get cacheAsBitmap(): boolean\n    {\n        return this.isCachedAsTexture;\n    },\n\n    /**\n     * @deprecated\n     */\n    set cacheAsBitmap(val: boolean)\n    {\n        // #if _DEBUG\n        deprecation('v8.6.0', 'cacheAsBitmap is deprecated, use cacheAsTexture instead.');\n        // #endif\n        this.cacheAsTexture(val);\n    },\n} as Container;\n"],"names":["deprecation"],"mappings":";;;;;AA4CO,MAAM,mBAA0C,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnD,IAAI,iBACJ,GAAA;AACI,IAAO,OAAA,CAAC,CAAC,IAAA,CAAK,WAAa,EAAA,iBAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,eAAe,GACf,EAAA;AACI,IAAA,IAAI,OAAO,GAAA,KAAQ,SAAa,IAAA,GAAA,KAAQ,KACxC,EAAA;AACI,MAAA,IAAA,CAAK,kBAAmB,EAAA,CAAA;AAAA,KAG5B,MAAA;AACI,MAAA,IAAA,CAAK,iBAAkB,EAAA,CAAA;AACvB,MAAA,IAAA,CAAK,YAAY,oBAAqB,CAAA,GAAA,KAAQ,IAAO,GAAA,KAAK,GAAG,CAAA,CAAA;AAAA,KACjE;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBACA,GAAA;AACI,IAAA,IAAA,CAAK,aAAa,kBAAmB,EAAA,CAAA;AAAA,GACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,iBAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAc,GAClB,EAAA;AAEI,IAAAA,uBAAA,CAAY,UAAU,0DAA0D,CAAA,CAAA;AAEhF,IAAA,IAAA,CAAK,eAAe,GAAG,CAAA,CAAA;AAAA,GAC3B;AACJ;;;;"}