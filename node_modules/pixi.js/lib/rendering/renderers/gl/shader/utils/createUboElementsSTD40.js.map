{"version":3,"file":"createUboElementsSTD40.js","sources":["../../../../../../src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts"],"sourcesContent":["import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    i32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'vec2<i32>': 8,\n    'vec3<i32>': 12,\n    'vec4<i32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    const chunkSize = 16;\n\n    let size = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, chunkSize) * uboElement.data.size;\n        }\n\n        const boundary = size === 12 ? 16 : size;\n\n        uboElement.size = size;\n\n        const curOffset = offset % chunkSize;\n\n        if (curOffset > 0 && chunkSize - curOffset < boundary)\n        {\n            offset += (chunkSize - curOffset) % 16;\n        }\n        else\n        {\n            offset += (size - (curOffset % size)) % size;\n        }\n\n        uboElement.offset = offset;\n        offset += size;\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n"],"names":[],"mappings":";;;AAEO,MAAM,kBAA6C,GAAA;AAAA,EACtD,GAAK,EAAA,CAAA;AAAA,EACL,GAAK,EAAA,CAAA;AAAA,EACL,WAAa,EAAA,CAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA,EAEb,WAAa,EAAA,CAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA,EACb,WAAa,EAAA,EAAA;AAAA,EAEb,eAAe,EAAK,GAAA,CAAA;AAAA,EACpB,eAAe,EAAK,GAAA,CAAA;AAAA,EACpB,eAAe,EAAK,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBxB,EAAA;AAEO,SAAS,uBAAuB,WACvC,EAAA;AACI,EAAA,MAAM,WAA4B,GAAA,WAAA,CAAY,GAAI,CAAA,CAAC,IAC9C,MAAA;AAAA,IACG,IAAA;AAAA,IACA,MAAQ,EAAA,CAAA;AAAA,IACR,IAAM,EAAA,CAAA;AAAA,GACR,CAAA,CAAA,CAAA;AAEN,EAAA,MAAM,SAAY,GAAA,EAAA,CAAA;AAElB,EAAA,IAAI,IAAO,GAAA,CAAA,CAAA;AACX,EAAA,IAAI,MAAS,GAAA,CAAA,CAAA;AAEb,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,QAAQ,CACxC,EAAA,EAAA;AACI,IAAM,MAAA,UAAA,GAAa,YAAY,CAAC,CAAA,CAAA;AAEhC,IAAO,IAAA,GAAA,kBAAA,CAAmB,UAAW,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAE9C,IAAA,IAAI,CAAC,IACL,EAAA;AACI,MAAA,MAAM,IAAI,KAAM,CAAA,CAAA,aAAA,EAAgB,UAAW,CAAA,IAAA,CAAK,IAAI,CAAE,CAAA,CAAA,CAAA;AAAA,KAC1D;AAEA,IAAI,IAAA,UAAA,CAAW,IAAK,CAAA,IAAA,GAAO,CAC3B,EAAA;AACI,MAAA,IAAA,GAAO,KAAK,GAAI,CAAA,IAAA,EAAM,SAAS,CAAA,GAAI,WAAW,IAAK,CAAA,IAAA,CAAA;AAAA,KACvD;AAEA,IAAM,MAAA,QAAA,GAAW,IAAS,KAAA,EAAA,GAAK,EAAK,GAAA,IAAA,CAAA;AAEpC,IAAA,UAAA,CAAW,IAAO,GAAA,IAAA,CAAA;AAElB,IAAA,MAAM,YAAY,MAAS,GAAA,SAAA,CAAA;AAE3B,IAAA,IAAI,SAAY,GAAA,CAAA,IAAK,SAAY,GAAA,SAAA,GAAY,QAC7C,EAAA;AACI,MAAA,MAAA,IAAA,CAAW,YAAY,SAAa,IAAA,EAAA,CAAA;AAAA,KAGxC,MAAA;AACI,MAAW,MAAA,IAAA,CAAA,IAAA,GAAQ,YAAY,IAAS,IAAA,IAAA,CAAA;AAAA,KAC5C;AAEA,IAAA,UAAA,CAAW,MAAS,GAAA,MAAA,CAAA;AACpB,IAAU,MAAA,IAAA,IAAA,CAAA;AAAA,GACd;AAEA,EAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,EAAE,CAAI,GAAA,EAAA,CAAA;AAElC,EAAO,OAAA,EAAE,WAAa,EAAA,IAAA,EAAM,MAAO,EAAA,CAAA;AACvC;;;;;"}