import '../../../_virtual/_commonjsHelpers.mjs';
import { __exports as lib } from '../../../_virtual/index3.mjs';

"use strict";
Object.defineProperty(lib, "__esModule", {
  value: true
});
var loop_1 = lib.loop = conditional_1 = lib.conditional = parse_1 = lib.parse = void 0;
var parse = function parse2(stream, schema) {
  var result = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var parent = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : result;
  if (Array.isArray(schema)) {
    schema.forEach(function(partSchema) {
      return parse2(stream, partSchema, result, parent);
    });
  } else if (typeof schema === "function") {
    schema(stream, result, parent, parse2);
  } else {
    var key = Object.keys(schema)[0];
    if (Array.isArray(schema[key])) {
      parent[key] = {};
      parse2(stream, schema[key], result, parent[key]);
    } else {
      parent[key] = schema[key](stream, result, parent, parse2);
    }
  }
  return result;
};
var parse_1 = lib.parse = parse;
var conditional = function conditional2(schema, conditionFunc) {
  return function(stream, result, parent, parse3) {
    if (conditionFunc(stream, result, parent)) {
      parse3(stream, schema, result, parent);
    }
  };
};
var conditional_1 = lib.conditional = conditional;
var loop = function loop2(schema, continueFunc) {
  return function(stream, result, parent, parse3) {
    var arr = [];
    var lastStreamPos = stream.pos;
    while (continueFunc(stream, result, parent)) {
      var newParent = {};
      parse3(stream, schema, result, newParent);
      if (stream.pos === lastStreamPos) {
        break;
      }
      lastStreamPos = stream.pos;
      arr.push(newParent);
    }
    return arr;
  };
};
loop_1 = lib.loop = loop;

export { conditional_1 as conditional, lib as default, loop_1 as loop, parse_1 as parse };
//# sourceMappingURL=index.mjs.map
