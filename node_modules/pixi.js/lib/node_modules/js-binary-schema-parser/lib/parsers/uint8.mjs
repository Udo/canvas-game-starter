import '../../../../_virtual/_commonjsHelpers.mjs';
import { __exports as uint8 } from '../../../../_virtual/uint82.mjs';

"use strict";
Object.defineProperty(uint8, "__esModule", {
  value: true
});
var readBits_1 = uint8.readBits = readArray_1 = uint8.readArray = readUnsigned_1 = uint8.readUnsigned = readString_1 = uint8.readString = peekBytes_1 = uint8.peekBytes = readBytes_1 = uint8.readBytes = peekByte_1 = uint8.peekByte = readByte_1 = uint8.readByte = buildStream_1 = uint8.buildStream = void 0;
var buildStream = function buildStream2(uint8Data) {
  return {
    data: uint8Data,
    pos: 0
  };
};
var buildStream_1 = uint8.buildStream = buildStream;
var readByte = function readByte2() {
  return function(stream) {
    return stream.data[stream.pos++];
  };
};
var readByte_1 = uint8.readByte = readByte;
var peekByte = function peekByte2() {
  var offset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
  return function(stream) {
    return stream.data[stream.pos + offset];
  };
};
var peekByte_1 = uint8.peekByte = peekByte;
var readBytes = function readBytes2(length) {
  return function(stream) {
    return stream.data.subarray(stream.pos, stream.pos += length);
  };
};
var readBytes_1 = uint8.readBytes = readBytes;
var peekBytes = function peekBytes2(length) {
  return function(stream) {
    return stream.data.subarray(stream.pos, stream.pos + length);
  };
};
var peekBytes_1 = uint8.peekBytes = peekBytes;
var readString = function readString2(length) {
  return function(stream) {
    return Array.from(readBytes(length)(stream)).map(function(value) {
      return String.fromCharCode(value);
    }).join("");
  };
};
var readString_1 = uint8.readString = readString;
var readUnsigned = function readUnsigned2(littleEndian) {
  return function(stream) {
    var bytes = readBytes(2)(stream);
    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];
  };
};
var readUnsigned_1 = uint8.readUnsigned = readUnsigned;
var readArray = function readArray2(byteSize, totalOrFunc) {
  return function(stream, result, parent) {
    var total = typeof totalOrFunc === "function" ? totalOrFunc(stream, result, parent) : totalOrFunc;
    var parser = readBytes(byteSize);
    var arr = new Array(total);
    for (var i = 0; i < total; i++) {
      arr[i] = parser(stream);
    }
    return arr;
  };
};
var readArray_1 = uint8.readArray = readArray;
var subBitsTotal = function subBitsTotal2(bits, startIndex, length) {
  var result = 0;
  for (var i = 0; i < length; i++) {
    result += bits[startIndex + i] && Math.pow(2, length - i - 1);
  }
  return result;
};
var readBits = function readBits2(schema) {
  return function(stream) {
    var _byte = readByte()(stream);
    var bits = new Array(8);
    for (var i = 0; i < 8; i++) {
      bits[7 - i] = !!(_byte & 1 << i);
    }
    return Object.keys(schema).reduce(function(res, key) {
      var def = schema[key];
      if (def.length) {
        res[key] = subBitsTotal(bits, def.index, def.length);
      } else {
        res[key] = bits[def.index];
      }
      return res;
    }, {});
  };
};
readBits_1 = uint8.readBits = readBits;

export { buildStream_1 as buildStream, uint8 as default, peekByte_1 as peekByte, peekBytes_1 as peekBytes, readArray_1 as readArray, readBits_1 as readBits, readByte_1 as readByte, readBytes_1 as readBytes, readString_1 as readString, readUnsigned_1 as readUnsigned };
//# sourceMappingURL=uint8.mjs.map
