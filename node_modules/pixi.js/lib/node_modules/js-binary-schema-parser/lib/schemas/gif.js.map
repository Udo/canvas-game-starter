{"version":3,"file":"gif.js","sources":["../../../../../node_modules/js-binary-schema-parser/lib/schemas/gif.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = require(\"../\");\n\nvar _uint = require(\"../parsers/uint8\");\n\n// a set of 0x00 terminated subblocks\nvar subBlocksSchema = {\n  blocks: function blocks(stream) {\n    var terminator = 0x00;\n    var chunks = [];\n    var streamSize = stream.data.length;\n    var total = 0;\n\n    for (var size = (0, _uint.readByte)()(stream); size !== terminator; size = (0, _uint.readByte)()(stream)) {\n      // size becomes undefined for some case when file is corrupted and  terminator is not proper \n      // null check to avoid recursion\n      if (!size) break; // catch corrupted files with no terminator\n\n      if (stream.pos + size >= streamSize) {\n        var availableSize = streamSize - stream.pos;\n        chunks.push((0, _uint.readBytes)(availableSize)(stream));\n        total += availableSize;\n        break;\n      }\n\n      chunks.push((0, _uint.readBytes)(size)(stream));\n      total += size;\n    }\n\n    var result = new Uint8Array(total);\n    var offset = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset);\n      offset += chunks[i].length;\n    }\n\n    return result;\n  }\n}; // global control extension\n\nvar gceSchema = (0, _.conditional)({\n  gce: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    byteSize: (0, _uint.readByte)()\n  }, {\n    extras: (0, _uint.readBits)({\n      future: {\n        index: 0,\n        length: 3\n      },\n      disposal: {\n        index: 3,\n        length: 3\n      },\n      userInput: {\n        index: 6\n      },\n      transparentColorGiven: {\n        index: 7\n      }\n    })\n  }, {\n    delay: (0, _uint.readUnsigned)(true)\n  }, {\n    transparentColorIndex: (0, _uint.readByte)()\n  }, {\n    terminator: (0, _uint.readByte)()\n  }]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xf9;\n}); // image pipeline block\n\nvar imageSchema = (0, _.conditional)({\n  image: [{\n    code: (0, _uint.readByte)()\n  }, {\n    descriptor: [{\n      left: (0, _uint.readUnsigned)(true)\n    }, {\n      top: (0, _uint.readUnsigned)(true)\n    }, {\n      width: (0, _uint.readUnsigned)(true)\n    }, {\n      height: (0, _uint.readUnsigned)(true)\n    }, {\n      lct: (0, _uint.readBits)({\n        exists: {\n          index: 0\n        },\n        interlaced: {\n          index: 1\n        },\n        sort: {\n          index: 2\n        },\n        future: {\n          index: 3,\n          length: 2\n        },\n        size: {\n          index: 5,\n          length: 3\n        }\n      })\n    }]\n  }, (0, _.conditional)({\n    lct: (0, _uint.readArray)(3, function (stream, result, parent) {\n      return Math.pow(2, parent.descriptor.lct.size + 1);\n    })\n  }, function (stream, result, parent) {\n    return parent.descriptor.lct.exists;\n  }), {\n    data: [{\n      minCodeSize: (0, _uint.readByte)()\n    }, subBlocksSchema]\n  }]\n}, function (stream) {\n  return (0, _uint.peekByte)()(stream) === 0x2c;\n}); // plain text block\n\nvar textSchema = (0, _.conditional)({\n  text: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    preData: function preData(stream, result, parent) {\n      return (0, _uint.readBytes)(parent.text.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0x01;\n}); // application block\n\nvar applicationSchema = (0, _.conditional)({\n  application: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    id: function id(stream, result, parent) {\n      return (0, _uint.readString)(parent.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xff;\n}); // comment block\n\nvar commentSchema = (0, _.conditional)({\n  comment: [{\n    codes: (0, _uint.readBytes)(2)\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xfe;\n});\nvar schema = [{\n  header: [{\n    signature: (0, _uint.readString)(3)\n  }, {\n    version: (0, _uint.readString)(3)\n  }]\n}, {\n  lsd: [{\n    width: (0, _uint.readUnsigned)(true)\n  }, {\n    height: (0, _uint.readUnsigned)(true)\n  }, {\n    gct: (0, _uint.readBits)({\n      exists: {\n        index: 0\n      },\n      resolution: {\n        index: 1,\n        length: 3\n      },\n      sort: {\n        index: 4\n      },\n      size: {\n        index: 5,\n        length: 3\n      }\n    })\n  }, {\n    backgroundColorIndex: (0, _uint.readByte)()\n  }, {\n    pixelAspectRatio: (0, _uint.readByte)()\n  }]\n}, (0, _.conditional)({\n  gct: (0, _uint.readArray)(3, function (stream, result) {\n    return Math.pow(2, result.lsd.gct.size + 1);\n  })\n}, function (stream, result) {\n  return result.lsd.gct.exists;\n}), // content frames\n{\n  frames: (0, _.loop)([gceSchema, applicationSchema, commentSchema, imageSchema, textSchema], function (stream) {\n    var nextCode = (0, _uint.peekByte)()(stream); // rather than check for a terminator, we should check for the existence\n    // of an ext or image block to avoid infinite loops\n    //var terminator = 0x3B;\n    //return nextCode !== terminator;\n\n    return nextCode === 0x21 || nextCode === 0x2c;\n  })\n}];\nvar _default = schema;\nexports[\"default\"] = _default;"],"names":["require$$0","require$$1"],"mappings":"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","x_google_ignoreList":[0]}