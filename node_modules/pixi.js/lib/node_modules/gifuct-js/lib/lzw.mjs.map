{"version":3,"file":"lzw.mjs","sources":["../../../../node_modules/gifuct-js/lib/lzw.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lzw = void 0;\n\n/**\r\n * javascript port of java LZW decompression\r\n * Original java author url: https://gist.github.com/devunwired/4479231\r\n */\nvar lzw = function lzw(minCodeSize, data, pixelCount) {\n  var MAX_STACK_SIZE = 4096;\n  var nullCode = -1;\n  var npix = pixelCount;\n  var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n  var dstPixels = new Array(pixelCount);\n  var prefix = new Array(MAX_STACK_SIZE);\n  var suffix = new Array(MAX_STACK_SIZE);\n  var pixelStack = new Array(MAX_STACK_SIZE + 1); // Initialize GIF data stream decoder.\n\n  data_size = minCodeSize;\n  clear = 1 << data_size;\n  end_of_information = clear + 1;\n  available = clear + 2;\n  old_code = nullCode;\n  code_size = data_size + 1;\n  code_mask = (1 << code_size) - 1;\n\n  for (code = 0; code < clear; code++) {\n    prefix[code] = 0;\n    suffix[code] = code;\n  } // Decode GIF pixel stream.\n\n\n  var datum, bits, count, first, top, pi, bi;\n  datum = bits = count = first = top = pi = bi = 0;\n\n  for (i = 0; i < npix;) {\n    if (top === 0) {\n      if (bits < code_size) {\n        // get the next byte\n        datum += data[bi] << bits;\n        bits += 8;\n        bi++;\n        continue;\n      } // Get the next code.\n\n\n      code = datum & code_mask;\n      datum >>= code_size;\n      bits -= code_size; // Interpret the code\n\n      if (code > available || code == end_of_information) {\n        break;\n      }\n\n      if (code == clear) {\n        // Reset decoder.\n        code_size = data_size + 1;\n        code_mask = (1 << code_size) - 1;\n        available = clear + 2;\n        old_code = nullCode;\n        continue;\n      }\n\n      if (old_code == nullCode) {\n        pixelStack[top++] = suffix[code];\n        old_code = code;\n        first = code;\n        continue;\n      }\n\n      in_code = code;\n\n      if (code == available) {\n        pixelStack[top++] = first;\n        code = old_code;\n      }\n\n      while (code > clear) {\n        pixelStack[top++] = suffix[code];\n        code = prefix[code];\n      }\n\n      first = suffix[code] & 0xff;\n      pixelStack[top++] = first; // add a new string to the table, but only if space is available\n      // if not, just continue with current table until a clear code is found\n      // (deferred clear code implementation as per GIF spec)\n\n      if (available < MAX_STACK_SIZE) {\n        prefix[available] = old_code;\n        suffix[available] = first;\n        available++;\n\n        if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n          code_size++;\n          code_mask += available;\n        }\n      }\n\n      old_code = in_code;\n    } // Pop a pixel off the pixel stack.\n\n\n    top--;\n    dstPixels[pi++] = pixelStack[top];\n    i++;\n  }\n\n  for (i = pi; i < npix; i++) {\n    dstPixels[i] = 0; // clear missing pixels\n  }\n\n  return dstPixels;\n};\n\nexports.lzw = lzw;"],"names":["lzw_1","lzw"],"mappings":"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","x_google_ignoreList":[0]}