var source = "struct EmbossUniforms {\n  uStrength:f32,\n};\n\nstruct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \n@group(0) @binding(2) var uSampler: sampler;\n@group(1) @binding(0) var<uniform> embossUniforms : EmbossUniforms;\n\n@fragment\nfn mainFragment(\n  @builtin(position) position: vec4<f32>,\n  @location(0) uv : vec2<f32>\n) -> @location(0) vec4<f32> {\n  let onePixel: vec2<f32> = vec2<f32>(1.0 / gfu.uInputSize.xy);\n\tvar color: vec3<f32> = vec3<f32>(0.5);\n\n\tcolor -= (textureSample(uTexture, uSampler, uv - onePixel) * embossUniforms.uStrength).rgb;\n\tcolor += (textureSample(uTexture, uSampler, uv + onePixel) * embossUniforms.uStrength).rgb;\n\n\tcolor = vec3<f32>((color.r + color.g + color.b) / 3.0);\n\n\tlet blendColor: vec4<f32> = textureSample(uTexture, uSampler, uv);\n\n\treturn vec4<f32>(color.rgb * blendColor.a, blendColor.a);\n}";

export { source as default };
//# sourceMappingURL=emboss2.mjs.map
