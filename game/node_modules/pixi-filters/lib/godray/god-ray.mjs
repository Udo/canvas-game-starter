var source = "struct GodrayUniforms {\n  uLight: vec2<f32>,\n  uParallel: f32,\n  uAspect: f32,\n  uTime: f32,\n  uRay: vec3<f32>,\n  uDimensions: vec2<f32>,\n};\n\nstruct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \n@group(0) @binding(2) var uSampler: sampler;\n@group(1) @binding(0) var<uniform> godrayUniforms : GodrayUniforms;\n\n@fragment\nfn mainFragment(\n  @builtin(position) position: vec4<f32>,\n  @location(0) uv : vec2<f32>\n) -> @location(0) vec4<f32> {\n  let uDimensions: vec2<f32> = godrayUniforms.uDimensions;\n  let uParallel: bool = godrayUniforms.uParallel > 0.5;\n  let uLight: vec2<f32> = godrayUniforms.uLight;\n  let uAspect: f32 = godrayUniforms.uAspect;\n\n  let coord: vec2<f32> = uv * gfu.uInputSize.xy / uDimensions;\n\n  var d: f32;\n\n  if (uParallel) {\n    let _cos: f32 = uLight.x;\n    let _sin: f32 = uLight.y;\n    d = (_cos * coord.x) + (_sin * coord.y * uAspect);\n  } else {\n    let dx: f32 = coord.x - uLight.x / uDimensions.x;\n    let dy: f32 = (coord.y - uLight.y / uDimensions.y) * uAspect;\n    let dis: f32 = sqrt(dx * dx + dy * dy) + 0.00001;\n    d = dy / dis;\n  }\n\n  let uTime: f32 = godrayUniforms.uTime;\n  let uRay: vec3<f32> = godrayUniforms.uRay;\n  \n  let gain = uRay[0];\n  let lacunarity = uRay[1];\n  let alpha = uRay[2];\n\n  let dir: vec3<f32> = vec3<f32>(d, d, 0.0);\n  var noise: f32 = turb(dir + vec3<f32>(uTime, 0.0, 62.1 + uTime) * 0.05, vec3<f32>(480.0, 320.0, 480.0), lacunarity, gain);\n  noise = mix(noise, 0.0, 0.3);\n  //fade vertically.\n  var mist: vec4<f32> = vec4<f32>(vec3<f32>(noise), 1.0) * (1.0 - coord.y);\n  mist.a = 1.0;\n  // apply user alpha\n  mist *= alpha;\n  return textureSample(uTexture, uSampler, uv) + mist;\n}\n\n${PERLIN}";

export { source as default };
//# sourceMappingURL=god-ray.mjs.map
