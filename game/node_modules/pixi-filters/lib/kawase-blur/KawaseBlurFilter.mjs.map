{"version":3,"file":"KawaseBlurFilter.mjs","sources":["../../src/kawase-blur/KawaseBlurFilter.ts"],"sourcesContent":["import { deprecation, Filter, GlProgram, GpuProgram, TexturePool } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './kawase-blur.frag';\nimport source from './kawase-blur.wgsl';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport sourceClamp from './kawase-blur-clamp.wgsl';\n\nimport type { FilterSystem, PointData, RenderSurface, Texture } from 'pixi.js';\n\n/** Options for the KawaseBlurFilter constructor. */\nexport interface KawaseBlurFilterOptions\n{\n    /**\n     * The blur of the filter. Should be greater than `0`.\n     * If value is an Array, setting kernels.\n     * @default 4\n     */\n    strength?: number | [number, number];\n    /**\n     * The quality of the filter. Should be an integer greater than `1`\n     * @default 3\n     */\n    quality?: number;\n    /**\n     * Clamp edges, useful for removing dark edges from fullscreen filters or bleeding to the edge of filterArea.\n     * @default false\n     */\n    clamp?: boolean;\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     * @default {x:1,y:1}\n     */\n    pixelSize?: PointData | number[] | number;\n}\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends Filter\n */\nexport class KawaseBlurFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: KawaseBlurFilterOptions = {\n        strength: 4,\n        quality: 3,\n        clamp: false,\n        pixelSize: { x: 1, y: 1 },\n    };\n\n    public uniforms: {\n        uOffset: Float32Array;\n    };\n\n    private _pixelSize = { x: 0, y: 0 };\n    private _clamp: boolean;\n    private _kernels: number[] = [];\n    private _blur!: number;\n    private _quality!: number;\n\n    /**\n     * @param options - Options for the KawaseBlurFilter constructor.\n     */\n    constructor(options?: KawaseBlurFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n     *        value is an Array, setting kernels.\n     * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n     * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n     *        from fullscreen filters or bleeding to the edge of filterArea.\n     */\n    constructor(blur?: number | number[], quality?: number, clamp?: boolean);\n    /** @ignore */\n    constructor(...args: [KawaseBlurFilterOptions?] | [(number | number[])?, number?, boolean?])\n    {\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number' || Array.isArray(options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'KawaseBlurFilter constructor params are now options object. See params: { strength, quality, clamp, pixelSize }');\n\n            options = { strength: options as number | [number, number] };\n\n            if (args[1] !== undefined) options.quality = args[1];\n            if (args[2] !== undefined) options.clamp = args[2];\n        }\n\n        options = { ...KawaseBlurFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: options?.clamp ? sourceClamp : source,\n                entryPoint: 'mainFragment',\n            },\n        });\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: options?.clamp ? fragmentClamp : fragment,\n            name: 'kawase-blur-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                kawaseBlurUniforms: {\n                    uOffset: { value: new Float32Array(2), type: 'vec2<f32>' },\n                }\n            },\n        });\n\n        this.uniforms = this.resources.kawaseBlurUniforms.uniforms;\n\n        this.pixelSize = options.pixelSize ?? { x: 1, y: 1 };\n\n        if (Array.isArray(options.strength))\n        {\n            this.kernels = options.strength;\n        }\n        else if (typeof options.strength === 'number')\n        {\n            this._blur = options.strength;\n            this.quality = options.quality ?? 3;\n        }\n\n        this._clamp = !!options.clamp;\n    }\n\n    /**\n     * Override existing apply method in `Filter`\n     * @override\n     * @ignore\n     */\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const uvX = this.pixelSizeX / input.source.width;\n        const uvY = this.pixelSizeY / input.source.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0)\n        {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = TexturePool.getSameSizeTexture(input);\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++)\n            {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n\n            filterManager.applyFilter(this, source, output, clearMode);\n            TexturePool.returnTexture(renderTarget);\n        }\n    }\n\n    /**\n      * The amount of blur, value greater than `0`.\n      * @default 4\n      */\n    get strength(): number { return this._blur; }\n    set strength(value: number)\n    {\n        this._blur = value;\n        this._generateKernels();\n    }\n\n    /**\n      * The quality of the filter, integer greater than `1`.\n      * @default 3\n      */\n    get quality(): number { return this._quality; }\n    set quality(value: number)\n    {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n      * The kernel size of the blur filter, for advanced usage\n      * @default [0]\n      */\n    get kernels(): number[] { return this._kernels; }\n    set kernels(value: number[])\n    {\n        if (Array.isArray(value) && value.length > 0)\n        {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max(...value);\n        }\n        else\n        {\n            // If value is invalid, set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n      * The size of the pixels. Large size is blurrier. For advanced usage.\n      * @default {x:1,y:1}\n      */\n    get pixelSize(): PointData { return this._pixelSize; }\n    set pixelSize(value: PointData | number[] | number)\n    {\n        if (typeof value === 'number')\n        {\n            this.pixelSizeX = this.pixelSizeY = value;\n\n            return;\n        }\n\n        if (Array.isArray(value))\n        {\n            this.pixelSizeX = value[0];\n            this.pixelSizeY = value[1];\n\n            return;\n        }\n\n        this._pixelSize = value;\n    }\n\n    /**\n      * The size of the pixels on the `x` axis. Large size is blurrier. For advanced usage.\n      * @default 1\n      */\n    get pixelSizeX(): number { return this.pixelSize.x; }\n    set pixelSizeX(value: number) { this.pixelSize.x = value; }\n\n    /**\n      * The size of the pixels on the `y` axis. Large size is blurrier. For advanced usage.\n      * @default 1\n      */\n    get pixelSizeY(): number { return this.pixelSize.y; }\n    set pixelSizeY(value: number) { this.pixelSize.y = value; }\n\n    /**\n      * Get the if the filter is clamped\n      * @default false\n      */\n    get clamp(): boolean { return this._clamp; }\n\n    /** Update padding based on kernel data */\n    private _updatePadding()\n    {\n        this.padding = Math.ceil(this._kernels.reduce((acc, v) => acc + v + 0.5, 0));\n    }\n\n    /** Auto generate kernels by blur & quality */\n    private _generateKernels()\n    {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels: number[] = [blur];\n\n        if (blur > 0)\n        {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++)\n            {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n        this._updatePadding();\n    }\n}\n"],"names":["source"],"mappings":"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"}