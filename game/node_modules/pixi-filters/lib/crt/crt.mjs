var fragment = "precision highp float;\nin vec2 vTextureCoord;\nout vec4 finalColor;\n\nuniform sampler2D uTexture;\nuniform vec4 uLine;\nuniform vec2 uNoise;\nuniform vec3 uVignette;\nuniform float uSeed;\nuniform float uTime;\nuniform vec2 uDimensions;\n\nuniform vec4 uInputSize;\n\nconst float SQRT_2 = 1.414213;\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat vignette(vec3 co, vec2 coord)\n{\n    float outter = SQRT_2 - uVignette[0] * SQRT_2;\n    vec2 dir = vec2(0.5) - coord;\n    dir.y *= uDimensions.y / uDimensions.x;\n    float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + uVignette[2] * SQRT_2), 0.0, 1.0);\n    return darker + (1.0 - darker) * (1.0 - uVignette[1]);\n}\n\nfloat noise(vec2 coord)\n{\n    vec2 pixelCoord = coord * uInputSize.xy;\n    pixelCoord.x = floor(pixelCoord.x / uNoise[1]);\n    pixelCoord.y = floor(pixelCoord.y / uNoise[1]);\n    return (rand(pixelCoord * uNoise[1] * uSeed) - 0.5) * uNoise[0];\n}\n\nvec3 interlaceLines(vec3 co, vec2 coord)\n{\n    vec3 color = co;\n\n    float curvature = uLine[0];\n    float lineWidth = uLine[1];\n    float lineContrast = uLine[2];\n    float verticalLine = uLine[3];\n\n    vec2 dir = vec2(coord * uInputSize.xy / uDimensions - 0.5);\n\n    float _c = curvature > 0. ? curvature : 1.;\n    float k = curvature > 0. ? (length(dir * dir) * 0.25 * _c * _c + 0.935 * _c) : 1.;\n    vec2 uv = dir * k;\n    float v = verticalLine > 0.5 ? uv.x * uDimensions.x : uv.y * uDimensions.y;\n    v *= min(1.0, 2.0 / lineWidth ) / _c;\n    float j = 1. + cos(v * 1.2 - uTime) * 0.5 * lineContrast;\n    color *= j;\n\n    float segment = verticalLine > 0.5 ? mod((dir.x + .5) * uDimensions.x, 4.) : mod((dir.y + .5) * uDimensions.y, 4.);\n    color *= 0.99 + ceil(segment) * 0.015;\n\n    return color;\n}\n\nvoid main(void)\n{\n    finalColor = texture(uTexture, vTextureCoord);\n    vec2 coord = vTextureCoord * uInputSize.xy / uDimensions;\n\n    if (uNoise[0] > 0.0 && uNoise[1] > 0.0)\n    {\n        float n = noise(vTextureCoord);\n        finalColor += vec4(n, n, n, finalColor.a);\n    }\n\n    if (uVignette[0] > 0.)\n    {\n        float v = vignette(finalColor.rgb, coord);\n        finalColor *= vec4(v, v, v, finalColor.a);\n    }\n\n    if (uLine[1] > 0.0)\n    {\n        finalColor = vec4(interlaceLines(finalColor.rgb, vTextureCoord), finalColor.a);  \n    }\n}\n";

export { fragment as default };
//# sourceMappingURL=crt.mjs.map
