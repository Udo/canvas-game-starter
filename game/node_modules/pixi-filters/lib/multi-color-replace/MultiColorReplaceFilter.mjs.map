{"version":3,"file":"MultiColorReplaceFilter.mjs","sources":["../../src/multi-color-replace/MultiColorReplaceFilter.ts"],"sourcesContent":["import { Color, ColorSource, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\nimport { vertex, wgslVertex } from '../defaults';\nimport fragment from './multi-color-replace.frag';\nimport source from './multi-color-replace.wgsl';\n\ntype DeprecatedColor = number | number[] | Float32Array;\n\n/** Options for the MultiColorReplaceFilter constructor. */\nexport interface MultiColorReplaceFilterOptions\n{\n    /**\n     * The collection of replacement items. Each item is color-pair\n     * (an array length is 2). In the pair, the first value is original color , the second value is target color\n     *\n     * _If you wish to change individual elements on the replacement array after instantiation,\n     * use the `refresh` function to update the uniforms once you've made the changes_\n     */\n    replacements: Array<[ColorSource, ColorSource]>;\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.05\n     */\n    tolerance?: number\n    /**\n     * The maximum number of replacements filter is able to use.\n     * Because the fragment is only compiled once, this cannot be changed after construction.\n     * If omitted, the default value is the length of `replacements`\n     */\n    maxColors?: number;\n}\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../screenshots/original.png)![filter](../screenshots/multi-color-replace.png)\n * @class\n * @extends Filter\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter({\n *    replacements: [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    tolerance: 0.001\n *  })];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter({\n *    replacements: [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    tolerance: 0.001\n *  })];\n *\n */\nexport class MultiColorReplaceFilter extends Filter\n{\n    /** Default values for options. */\n    public static readonly DEFAULT_OPTIONS: MultiColorReplaceFilterOptions = {\n        replacements: [[0xff0000, 0x0000ff]],\n        tolerance: 0.05,\n        maxColors: undefined,\n    };\n\n    public uniforms: {\n        uOriginalColors: Float32Array;\n        uTargetColors: Float32Array;\n        uTolerance: number;\n    };\n\n    private _replacements: Array<[ColorSource, ColorSource]> = [];\n    private _maxColors: number;\n\n    /**\n     * @param options - Options for the MultiColorReplaceFilter constructor.\n     */\n    constructor(options?: MultiColorReplaceFilterOptions);\n    /**\n     * @deprecated since 6.0.0\n     *\n     * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair\n     *        (an array length is 2). In the pair, the first value is original color , the second value\n     *        is target color.\n     * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n     *        fragment is only compiled once, this cannot be changed after construction.\n     *        If omitted, the default value is the length of `replacements`.\n     */\n    constructor(replacements: Array<[DeprecatedColor, DeprecatedColor]>, epsilon?: number, maxColors?: number);\n    /** @ignore */\n    constructor(...args: [MultiColorReplaceFilterOptions?] | [Array<[DeprecatedColor, DeprecatedColor]>, number?, number?])\n    {\n        let options = args[0] ?? {} as MultiColorReplaceFilterOptions;\n\n        if (Array.isArray(options))\n        {\n            // eslint-disable-next-line max-len\n            deprecation('6.0.0', 'MultiColorReplaceFilter constructor params are now options object. See params: { replacements, tolerance, maxColors }');\n\n            options = { replacements: options };\n\n            if (args[1]) options.tolerance = args[1];\n            if (args[2]) options.maxColors = args[2];\n        }\n\n        options = { ...MultiColorReplaceFilter.DEFAULT_OPTIONS, ...options };\n\n        const maxColors = options.maxColors ?? options.replacements.length;\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: wgslVertex,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: source.replace(/\\$\\{MAX_COLORS\\}/g, (maxColors).toFixed(0)),\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment: fragment.replace(/\\$\\{MAX_COLORS\\}/g, (maxColors).toFixed(0)),\n            name: 'multi-color-replace-filter',\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                multiColorReplaceUniforms: {\n                    uOriginalColors: {\n                        value: new Float32Array(3 * maxColors),\n                        type: 'vec3<f32>',\n                        size: maxColors\n                    },\n                    uTargetColors: {\n                        value: new Float32Array(3 * maxColors),\n                        type: 'vec3<f32>',\n                        size: maxColors\n                    },\n                    uTolerance: { value: options.tolerance, type: 'f32' },\n                }\n            },\n        });\n\n        this._maxColors = maxColors;\n\n        this.uniforms = this.resources.multiColorReplaceUniforms.uniforms;\n\n        this.replacements = options.replacements;\n    }\n\n    /**\n     * The collection of replacement items. Each item is color-pair\n     * (an array length is 2). In the pair, the first value is original color , the second value is target color\n     */\n    set replacements(replacements: Array<[ColorSource, ColorSource]>)\n    {\n        const originals = this.uniforms.uOriginalColors;\n        const targets = this.uniforms.uTargetColors;\n        const colorCount = replacements.length;\n        const color = new Color();\n\n        if (colorCount > this._maxColors)\n        {\n            throw new Error(`Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`);\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        let r;\n        let g;\n        let b;\n\n        for (let i = 0; i < colorCount; i++)\n        {\n            const pair = replacements[i];\n\n            // for original colors\n            color.setValue(pair[0]);\n\n            [r, g, b] = color.toArray();\n\n            originals[i * 3] = r;\n            originals[(i * 3) + 1] = g;\n            originals[(i * 3) + 2] = b;\n\n            // for target colors\n            color.setValue(pair[1]);\n\n            [r, g, b] = color.toArray();\n\n            targets[i * 3] = r;\n            targets[(i * 3) + 1] = g;\n            targets[(i * 3) + 2] = b;\n        }\n\n        this._replacements = replacements;\n    }\n\n    get replacements(): Array<[ColorSource, ColorSource]>\n    {\n        return this._replacements;\n    }\n\n    /**\n      * Should be called after changing any of the contents of the replacements.\n      * This is a convenience method for resetting the `replacements`.\n      * @todo implement nested proxy to remove the need for this function\n      */\n    refresh(): void\n    {\n        this.replacements = this._replacements;\n    }\n\n    /**\n      * The maximum number of color replacements supported by this filter. Can be changed\n      * _only_ during construction.\n      * @readonly\n      */\n    get maxColors(): number { return this._maxColors; }\n\n    /**\n      * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n      * @default 0.05\n      */\n    get tolerance(): number { return this.uniforms.uTolerance; }\n    set tolerance(value: number) { this.uniforms.uTolerance = value; }\n\n    /**\n     * @deprecated since 6.0.0\n     *\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.05\n     */\n    set epsilon(value: number)\n    {\n        // eslint-disable-next-line max-len\n        deprecation('6.0.0', 'MultiColorReplaceFilter.epsilon is deprecated, please use MultiColorReplaceFilter.tolerance instead');\n        this.tolerance = value;\n    }\n    get epsilon(): number\n    {\n        // eslint-disable-next-line max-len\n        deprecation('6.0.0', 'MultiColorReplaceFilter.epsilon is deprecated, please use MultiColorReplaceFilter.tolerance instead');\n\n        return this.tolerance;\n    }\n}\n"],"names":[],"mappings":"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"}